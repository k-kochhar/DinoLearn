"use client";

import { useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { 
  MagnifyingGlassIcon,
  ArrowPathIcon,
  ArrowLongRightIcon,
  ChevronDownIcon
} from "@heroicons/react/24/outline";

export default function CreateCourse() {
  const [topic, setTopic] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!topic.trim()) {
      setError("Please enter a topic");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Try to connect to the backend API
      try {
        // Connect to FastAPI backend - it keeps the same port and endpoint structure
        const response = await fetch("http://localhost:5000/api/roadmaps", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ topic: topic.trim() }),
        });

        if (!response.ok) {
          throw new Error("Failed to generate course");
        }

        const data = await response.json();
        
        // Navigate to the generated course page
        router.push(`/roadmap/${data._id}`);
      } catch (apiError) {
        // If backend API is not reachable, use demo mode with a simulated delay
        console.warn("Backend API unreachable, using demo mode:", apiError);

        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Use example data instead
        const demoRoadmapId = "demo-" + Date.now();
        
        // Store demo data in localStorage
        const demoRoadmap = {
          _id: demoRoadmapId,
          title: `${topic} Roadmap (Demo)`,
          lessons: Array.from({ length: 14 }, (_, i) => ({
            _id: `demo-lesson-${i}`,
            day: i+1,
            title: `${topic} Day ${i+1}`,
            summary: `This is a demonstration summary for learning ${topic} on day ${i+1}. In a real implementation, this would be generated by the AI based on your specific topic.`,
            lesson: [
              {
                section: "Introduction",
                content: `Welcome to day ${i+1} of your ${topic} learning journey. This is demo content that would normally be generated by AI.`
              },
              {
                section: "Key Concepts",
                content: `The key concepts for ${topic} on day ${i+1} would be explained here in detail.`
              },
              {
                section: "Examples",
                content: `Practical examples for ${topic} would be shown here to help you understand the concepts better.`
              },
              {
                section: "Practice",
                content: `Here are some practice exercises for ${topic} day ${i+1}.\n\n1. First practice item\n\n2. Second practice item`
              },
              {
                section: "Summary",
                content: `This concludes your learning about ${topic} for day ${i+1}. Tomorrow we'll continue with more advanced topics.`
              }
            ]
          }))
        };
        
        localStorage.setItem(`demoRoadmap-${demoRoadmapId}`, JSON.stringify(demoRoadmap));
        
        // Navigate to demo roadmap
        router.push(`/roadmap/${demoRoadmapId}`);
      }
    } catch (err) {
      console.error("Error in course generation process:", err);
      
      // More user-friendly error message
      if (err.message.includes("Failed to fetch") || !window.navigator.onLine) {
        setError("Unable to connect to the server. Please make sure the backend is running and try again.");
      } else {
        setError("Failed to generate course. Please try again.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-[#E5FCFF]">
      {/* Header */}
      <header className="bg-[#E5FCFF] py-5 px-6 border-b border-[#9EC1D9]/30 shadow-[0_4px_16px_rgba(0,0,0,0.03)]">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center gap-3">
            <Link href="/" className="flex items-center gap-2">
              <div className="h-10 w-10 rounded-full bg-white flex items-center justify-center shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <Image 
                  src="/Head.png" 
                  alt="DinoLearn logo" 
                  width={40} 
                  height={40}
                  className="rounded-full"
                  priority
                />
              </div>
              <span className="text-xl font-bold text-[#000000]">DinoLearn</span>
            </Link>
          </div>
          
          <nav className="hidden md:flex items-center gap-8">
            <Link href="/dashboard" className="text-[#2C3342] hover:text-[#E17454] transition-colors">Dashboard</Link>
            <Link href="/my-courses" className="text-[#2C3342] hover:text-[#E17454] transition-colors">My Courses</Link>
            <Link href="/create-course" className="text-[#000000] font-bold border-b-2 border-[#E17454] pb-1">Create Course</Link>
            <div className="flex items-center gap-2 bg-white py-1.5 px-3 rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer">
              <div className="h-9 w-9 bg-[#9EC1D9] rounded-full flex items-center justify-center">
                <span className="text-[#000000] font-medium">KS</span>
              </div>
              <span className="text-[#2C3342] hidden sm:inline font-medium">Kshitij</span>
              <ChevronDownIcon className="h-4 w-4 text-[#2C3342]/70" />
            </div>
          </nav>
          
          <div className="md:hidden flex items-center gap-4">
            <div className="flex items-center gap-2 bg-white py-1.5 px-2 rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer">
              <div className="h-8 w-8 bg-[#9EC1D9] rounded-full flex items-center justify-center">
                <span className="text-[#000000] font-medium">KS</span>
              </div>
              <ChevronDownIcon className="h-4 w-4 text-[#2C3342]/70" />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-12 px-6">
        <div className="max-w-3xl mx-auto">
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-[#000000] mb-4">Create a New Learning Path</h1>
            <p className="text-[#2C3342]/70 text-lg">
              Our AI will generate a personalized 14-day learning roadmap based on your topic of interest.
            </p>
          </div>
          
          <div className="bg-white rounded-2xl p-8 shadow-[0_8px_30px_rgba(0,0,0,0.08)] mb-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label htmlFor="topic" className="block text-[#2C3342] font-medium mb-2">
                  What would you like to learn about?
                </label>
                <div className="relative">
                  <input
                    id="topic"
                    type="text"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    placeholder="e.g. Machine Learning, JavaScript, Photography, etc."
                    className="w-full py-4 px-5 rounded-xl border border-[#2C3342]/10 focus:outline-none focus:ring-2 focus:ring-[#E17454]/20 focus:border-[#E17454]"
                    disabled={isLoading}
                  />
                  <MagnifyingGlassIcon className="absolute right-5 top-1/2 -translate-y-1/2 h-5 w-5 text-[#2C3342]/50" />
                </div>
                {error && (
                  <p className="mt-2 text-red-500 text-sm">{error}</p>
                )}
              </div>
              
              <button
                type="submit"
                disabled={isLoading}
                className={`w-full flex items-center justify-center gap-2 py-4 rounded-xl font-medium text-white ${
                  isLoading ? "bg-[#E17454]/70" : "bg-[#E17454] hover:bg-[#cf6143]"
                } transition-colors`}
              >
                {isLoading ? (
                  <>
                    <ArrowPathIcon className="h-5 w-5 animate-spin" />
                    Generating Your Course...
                  </>
                ) : (
                  <>
                    Generate Learning Path
                    <ArrowLongRightIcon className="h-5 w-5" />
                  </>
                )}
              </button>
            </form>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-[#F5F5F5] rounded-xl p-6 border border-gray-100">
              <div className="h-12 w-12 bg-[#9EC1D9]/30 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-6 w-6 text-[#000000]">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3v11.25A2.25 2.25 0 0 0 6 16.5h2.25M3.75 3h-1.5m1.5 0h16.5m0 0h1.5m-1.5 0v11.25A2.25 2.25 0 0 1 18 16.5h-2.25m-7.5 0h7.5m-7.5 0-1 3m8.5-3 1 3m0 0 .5 1.5m-.5-1.5h-9.5m0 0-.5 1.5M9 11.25v1.5M12 9v3.75m3-6v6" />
                </svg>
              </div>
              <h3 className="text-lg font-bold mb-2 text-[#2C3342]">Personalized Learning</h3>
              <p className="text-[#2C3342]/70">
                Our AI creates a custom roadmap tailored to your specific learning goals and interests.
              </p>
            </div>
            
            <div className="bg-[#F5F5F5] rounded-xl p-6 border border-gray-100">
              <div className="h-12 w-12 bg-[#9EC1D9]/30 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-6 w-6 text-[#000000]">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
              </div>
              <h3 className="text-lg font-bold mb-2 text-[#2C3342]">14-Day Structure</h3>
              <p className="text-[#2C3342]/70">
                A comprehensive plan that breaks down complex topics into manageable daily lessons.
              </p>
            </div>
            
            <div className="bg-[#F5F5F5] rounded-xl p-6 border border-gray-100">
              <div className="h-12 w-12 bg-[#9EC1D9]/30 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-6 w-6 text-[#000000]">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.5 20.25l-.259-1.035a3.375 3.375 0 0 0-2.456-2.456L12.75 16.5l1.035-.259a3.375 3.375 0 0 0 2.456-2.456L16.5 12.75l.259 1.035a3.375 3.375 0 0 0 2.456 2.456l1.035.259-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z" />
                </svg>
              </div>
              <h3 className="text-lg font-bold mb-2 text-[#2C3342]">AI-Generated Content</h3>
              <p className="text-[#2C3342]/70">
                High-quality lessons and quizzes created by advanced AI models to enhance your understanding.
              </p>
            </div>
            
            <div className="bg-[#F5F5F5] rounded-xl p-6 border border-gray-100">
              <div className="h-12 w-12 bg-[#9EC1D9]/30 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-6 w-6 text-[#000000]">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M15.042 21.672 13.684 16.6m0 0-2.51 2.225.569-9.47 5.227 7.917-3.286-.672Zm-7.518-.267A8.25 8.25 0 1 1 20.25 10.5M8.288 14.212A5.25 5.25 0 1 1 17.25 10.5" />
                </svg>
              </div>
              <h3 className="text-lg font-bold mb-2 text-[#2C3342]">Immediate Access</h3>
              <p className="text-[#2C3342]/70">
                Start learning right away with instantly generated courses on virtually any topic.
              </p>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}